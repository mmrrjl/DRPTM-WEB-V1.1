#!/usr/bin/env python3
"""
Test Script untuk Koneksi Antares IoT Platform (FIXED VERSION)
Hydroponics Project - Connection Test dengan Troubleshooting
"""

import requests
import json
import time
from datetime import datetime
import urllib3
from urllib.parse import urlparse

# Disable SSL warnings (untuk troubleshooting)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# ===== KONFIGURASI =====
# PENTING: Ganti dengan ACCESS_KEY dari dashboard Antares Anda
ACCESS_KEY = "8f4ec6a09e8e35eb:cfe0c7bf14d0b2e7"
APPLICATION_NAME = "hidro_try"
DEVICE_NAME = "lynk32_hidro_try"  # Fixed typo: lynk32 -> lynx32

# URL Endpoint Antares yang benar
BASE_URL = "https://platform.antares.id:8443/~/antares-cse/antares-id"

def test_basic_connectivity():
    """Test koneksi internet dasar"""
    print("üîç Testing koneksi internet dasar...")
    
    test_urls = [
        "https://google.com",
        "https://8.8.8.8",  # Google DNS
        "https://antares.id"
    ]
    
    for url in test_urls:
        try:
            response = requests.get(url, timeout=5, verify=False)
            print(f"‚úÖ {url}: OK (Status: {response.status_code})")
            return True
        except Exception as e:
            print(f"‚ùå {url}: {str(e)}")
    
    print("‚ùå Semua test koneksi gagal!")
    return False

def test_antares_platform():
    """Test koneksi spesifik ke platform Antares"""
    print("\nüîç Testing koneksi ke platform Antares...")
    
    # Test beberapa endpoint Antares
    test_endpoints = [
        "https://antares.id",
        "https://platform.antares.id",
        "https://platform.antares.id:8443"
    ]
    
    for endpoint in test_endpoints:
        try:
            print(f"   Testing {endpoint}...")
            response = requests.get(endpoint, timeout=10, verify=False)
            print(f"   ‚úÖ {endpoint}: Status {response.status_code}")
            if response.status_code == 200:
                return True
        except requests.exceptions.SSLError as e:
            print(f"   ‚ö†  SSL Error pada {endpoint}: {str(e)}")
        except requests.exceptions.ConnectTimeout:
            print(f"   ‚ùå Timeout pada {endpoint}")
        except requests.exceptions.ConnectionError as e:
            print(f"   ‚ùå Connection Error pada {endpoint}: {str(e)}")
        except Exception as e:
            print(f"   ‚ùå Error pada {endpoint}: {str(e)}")
    
    return False

def validate_config():
    """Validasi konfigurasi ACCESS_KEY dan nama aplikasi"""
    print("\nüîç Validasi konfigurasi...")
    
    if ACCESS_KEY == "YOUR_ACCESS_KEY_HERE" or len(ACCESS_KEY) < 10:
        print("‚ùå ACCESS_KEY belum diset atau tidak valid!")
        print("   Ambil ACCESS_KEY dari dashboard Antares Anda")
        return False
    
    if ":" not in ACCESS_KEY:
        print("‚ùå Format ACCESS_KEY tidak valid!")
        print("   Format yang benar: username:password")
        return False
    
    print(f"‚úÖ ACCESS_KEY: {ACCESS_KEY[:10]}...{ACCESS_KEY[-10:]}")
    print(f"‚úÖ Application: {APPLICATION_NAME}")
    print(f"‚úÖ Device: {DEVICE_NAME}")
    return True

def send_data_with_troubleshooting():
    """Kirim data dengan troubleshooting detail"""
    print("\nüöÄ Mencoba kirim data ke Antares dengan troubleshooting...")
    
    # URL yang benar sesuai dokumentasi
    url = f"{BASE_URL}/{APPLICATION_NAME}/{DEVICE_NAME}"
    print(f"üì° Target URL: {url}")
    
    # Headers sesuai dokumentasi Antares
    headers = {
        'X-M2M-Origin': ACCESS_KEY,
        'Content-Type': 'application/json;ty=4',
        'Accept': 'application/json'
    }
    
    # Data dummy sensor hidroponik - Format JSON yang benar untuk Antares
    sensor_data = {
        "m2m:cin": {
            "con": json.dumps({
                "pH": round(6.5 + (time.time() % 10) * 0.1, 2),
                "tds": int(950 + (time.time() % 100)),
                "temperature": round(25.0 + (time.time() % 5), 1),
                "timestamp": datetime.now().isoformat(),
                "status": "testing_fixed"
            })
        }
    }
    
    print(f"üìä Data yang akan dikirim:")
    print(f"   Raw JSON: {json.dumps(sensor_data, indent=2)}")
    print(f"   Content (parsed): {sensor_data['m2m:cin']['con']}")
    
    # Coba dengan berbagai format data dan konfigurasi
    data_formats = [
        # Format 1: Content sebagai JSON string (standar Antares)
        {
            "name": "JSON String Content",
            "data": {
                "m2m:cin": {
                    "con": json.dumps({
                        "pH": round(6.5 + (time.time() % 10) * 0.1, 2),
                        "tds": int(950 + (time.time() % 100)),
                        "temperature": round(25.0 + (time.time() % 5), 1),
                        "timestamp": datetime.now().isoformat(),
                        "status": "testing_format1"
                    })
                }
            }
        },
        # Format 2: Content sebagai plain string
        {
            "name": "Plain String Content", 
            "data": {
                "m2m:cin": {
                    "con": f"pH:6.5,TDS:950,Temp:25.0,Status:testing_format2,Time:{datetime.now().isoformat()}"
                }
            }
        },
        # Format 3: Content sebagai object langsung
        {
            "name": "Direct Object Content",
            "data": {
                "m2m:cin": {
                    "con": {
                        "pH": 7.0,
                        "tds": 1000,
                        "temperature": 30.0,
                        "timestamp": datetime.now().isoformat(),
                        "status": "testing_format3"
                    }
                }
            }
        }
    ]
    
    configs = [
        {"verify": True, "timeout": 10},
        {"verify": False, "timeout": 15},
    ]
    
    for format_idx, data_format in enumerate(data_formats, 1):
        print(f"\nüìã Testing Format {format_idx}: {data_format['name']}")
        print(f"   Data: {json.dumps(data_format['data'], indent=6)}")
        
        for config_idx, config in enumerate(configs, 1):
            try:
                print(f"\n   Percobaan {format_idx}.{config_idx}: {data_format['name']}, verify={config['verify']}")
                
                response = requests.post(
                    url, 
                    headers=headers, 
                    json=data_format['data'],
                    **config
                )
                
                print(f"   üì° Response Status: {response.status_code}")
                print(f"   üìÑ Response Text: {response.text}")
                
                if response.status_code in [200, 201]:
                    print("   ‚úÖ SUCCESS! Data berhasil dikirim")
                    return True
                elif response.status_code == 400:
                    print(f"   ‚ùå Bad Request - Format data salah")
                elif response.status_code == 401:
                    print(f"   ‚ùå Unauthorized - Cek ACCESS_KEY")
                elif response.status_code == 404:
                    print(f"   ‚ùå Not Found - Cek Application/Device name")
                else:
                    print(f"   ‚ùå Status {response.status_code}: {response.text}")
                    
            except Exception as e:
                print(f"   ‚ùå Error: {str(e)}")
                continue
    
    return False

def get_data_with_troubleshooting():
    """Ambil data dengan troubleshooting detail"""
    print("\nüì• Mencoba ambil data dari Antares...")
    
    url = f"{BASE_URL}/{APPLICATION_NAME}/{DEVICE_NAME}/la"
    print(f"üì° Target URL: {url}")
    
    headers = {
        'X-M2M-Origin': ACCESS_KEY,
        'Accept': 'application/json'
    }
    
    try:
        response = requests.get(url, headers=headers, timeout=15, verify=False)
        
        print(f"üì° Response Status: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ SUCCESS! Data berhasil diambil")
            
            if 'm2m:cin' in data and 'con' in data['m2m:cin']:
                content_str = data['m2m:cin']['con']
                try:
                    # Parse JSON string content
                    content = json.loads(content_str)
                    print(f"üìä Data terbaru: {json.dumps(content, indent=2)}")
                    return content
                except json.JSONDecodeError:
                    # Jika bukan JSON, tampilkan sebagai string
                    print(f"üìä Data terbaru (raw): {content_str}")
                    return content_str
            else:
                print("üì≠ Struktur data tidak sesuai atau device kosong")
                print(f"üìã Raw response: {json.dumps(data, indent=2)}")
        else:
            print(f"‚ùå Status tidak OK: {response.text}")
            
    except Exception as e:
        print(f"‚ùå Error: {str(e)}")
    
    return None

def diagnose_network():
    """Diagnosis masalah jaringan"""
    print("\nüîß DIAGNOSIS JARINGAN:")
    print("=" * 40)
    
    import socket
    import ssl
    
    # Test DNS resolution
    try:
        ip = socket.gethostbyname('platform.antares.id')
        print(f"‚úÖ DNS Resolution: platform.antares.id -> {ip}")
    except Exception as e:
        print(f"‚ùå DNS Resolution Error: {e}")
    
    # Test port connectivity
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(5)
        result = sock.connect_ex(('platform.antares.id', 8443))
        sock.close()
        
        if result == 0:
            print("‚úÖ Port 8443: Accessible")
        else:
            print("‚ùå Port 8443: Not accessible")
    except Exception as e:
        print(f"‚ùå Port Test Error: {e}")

def main():
    """Fungsi utama dengan troubleshooting lengkap"""
    print("=" * 60)
    print("üå± HYDROPONICS - ANTARES CONNECTION TEST (FIXED)")
    print("=" * 60)
    
    # Step 1: Validasi konfigurasi
    if not validate_config():
        return
    
    # Step 2: Test koneksi internet dasar
    if not test_basic_connectivity():
        print("\n‚ùå MASALAH KONEKSI INTERNET DASAR!")
        print("üîß Troubleshooting:")
        print("   1. Cek koneksi internet Anda")
        print("   2. Cek apakah ada firewall yang memblokir")
        print("   3. Coba restart router/modem")
        return
    
    # Step 3: Test koneksi ke Antares
    if not test_antares_platform():
        print("\n‚ö†  MASALAH KONEKSI KE ANTARES!")
        diagnose_network()
        print("\nüîß Troubleshooting:")
        print("   1. Server Antares mungkin sedang maintenance")
        print("   2. ISP Anda mungkin memblokir akses ke Antares")
        print("   3. Coba gunakan VPN atau jaringan lain")
        print("   4. Coba lagi beberapa saat lagi")
        return
    
    # Step 4: Test kirim data
    print("\n" + "="*50)
    print("üöÄ TESTING PENGIRIMAN DATA")
    print("="*50)
    
    success = send_data_with_troubleshooting()
    
    if success:
        # Step 5: Test ambil data
        print("\n‚è≥ Menunggu 5 detik sebelum mengambil data...")
        time.sleep(5)
        get_data_with_troubleshooting()
        
        print("\nüéâ SEMUA TEST BERHASIL!")
        print("üìã Next steps:")
        print("   1. Cek dashboard Antares - ada data baru?")
        print("   2. Setup MQTT untuk real-time communication")
        print("   3. Integrasikan dengan sensor fisik")
    else:
        print("\n‚ùå TEST PENGIRIMAN DATA GAGAL!")
        print("üîß Kemungkinan masalah:")
        print("   1. ACCESS_KEY salah atau expired")
        print("   2. Application/Device belum dibuat di dashboard")
        print("   3. Kuota Antares sudah habis") 
        print("   4. Format data tidak sesuai")
        print("   5. Server Antares sedang bermasalah")

if _name_ == "_main_":
    main()